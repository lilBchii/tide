searchState.loadedDescShard("tide", 0, "Represents messages that trigger updates in the Tide …\nThe main application structure for Tide.\nThe configuration settings loaded from a TOML file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEntry point of the Tide application.\nConstructs a new <code>Tide</code> instance with the provided …\nRetrieves the current window scale factor.\nThe currently active screen (either the welcome screen or …\nReturns the current UI theme.\nThe current theme used across the application UI.\nHandles application updates in response to messages from …\nRenders the current UI based on the active screen.\nThe factor used to scale UI elements based on the display.\nConfiguration for UI theme colors.\nRoot configuration structure loaded from a TOML file.\nDefault auto-pairing characters used in the editor. These …\nEmbedded fallback font (Roboto Black) used if no font is …\nDefault path to the Roboto Black font on disk.\nConfiguration specific to the text editor component.\nConfiguration for general application behavior.\nAutomatically inserted character pairs (e.g. <code>(</code> -&gt; <code>)</code>).\nBackground color of the UI.\nUI color palette configuration.\nColor used to indicate error or danger states.\nReturns default general configuration settings.\nReturns default editor settings, including auto-pairs.\nReturns the default color palette.\nReturns the default auto-pairing character map used in the …\nEditor-specific configuration such as font size and …\nPath to the font file used in the application.\nDefault font size for UI elements.\nFont size used in the text editor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGeneral application settings (font path, scale factor, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads a <code>Config</code> from a TOML file at the given path.\nPrimary accent color used for key UI elements.\nLoads the font specified in the configuration.\nColor used to indicate success states.\nDefault text color.\nScale factor for high-DPI displays.\n<code>SerDe</code> module for serializing and deserializing <code>Color</code> …\n<code>SerDe</code> module for serializing and deserializing optional …\nConverts a <code>Color</code> into a hexadecimal string in the form …\nParses a hexadecimal color string (e.g., <code>#RRGGBB</code> or …\nDeserializes a hexadecimal string (e.g., <code>#FFAA00</code>) into a …\nSerializes a <code>Color</code> as a hexadecimal string (e.g., <code>#RRGGBB</code> …\nDeserializes an optional hexadecimal string into an …\nSerializes an <code>Option&lt;Color&gt;</code> as a hexadecimal string if <code>Some</code>…\nReturns a danger-themed style for a “cancel” button …\nReturns a minimalistic style for dropdown menu buttons …\nReturns a clean, borderless style for buttons used in …\nReturns a primary-colored style used for toolbar buttons.\nReturns a success-themed style for a “validate” button …\nReturns the style for debug containers.\nReturns the style for the text editor widget, including …\nReturns the default text color style for the main file in …\nReturns the style for a container representing a selected …\nReturns the color styling for SVG icons.\nReturns the style used for modal windows.\nReturns the text style used inside modal dialogs.\nReturns the style for confirmation dialogs or neutral …\nReturns a semi-transparent black background style, used …\nReturns the style for containers indicating critical …\nReturns the styling for title text in pop-up elements.\nReturns the visual style for containers meant to display …\nReturns the tooltip container style, using the theme’s …\nGenerates autocompletion suggestions for a given position …\nFilters completion suggestions based on the current word …\nLogs the available completion suggestions for debugging …\nMaps key presses to editor bindings. Returns an optional …\nRepresents an editable buffer in the editor.\nThe content of the buffer.\nReplaces the current content of the buffer with the …\nReturns the argument unchanged.\nCreates a buffer from existing content.\nLoads a buffer from a file path. Returns an <code>std::io::Error</code> …\nCalls <code>U::from(self)</code>.\nIndicates whether the buffer content is saved to disk.\nCreates a new, empty buffer.\nCompiles the main Typst source in the given <code>TideWorld</code> into …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe Typst compilation process failed.\nDescribes possible failures during compilation, export, or …\nReading a file from disk failed.\nWriting a file to disk failed.\nPDF generation failed after successful compilation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExports the compiled document as a PDF at the specified …\nConverts a compiled Typst <code>PagedDocument</code> into a PDF byte …\nWrites the PDF byte content to the specified file path.\nExports each page of the compiled Typst document as an …\nConverts each page of a PagedDocument into SVG string …\nCompiles and previews all document pages as in-memory SVG …\nWrites each SVG string to disk as a separate file using …\nExports a <code>.typ</code> template file by copying it to the …\nMaximum number of recent projects to cache.\nRepresents a cached project used for quick access from the …\nAdds a project to the recent projects cache, ensuring no …\nDeletes the file corresponding to the given ID from disk.\nReturns the argument unchanged.\nReturns the path to the user-defined <code>config.toml</code> file …\nReturns the path to the <code>fonts</code> directory inside the Tide …\nLoads the list of recently used project paths from the …\nConverts an absolute path into a path relative to the …\nReturns the path to the <code>templates</code> directory inside the …\nCalls <code>U::from(self)</code>.\nOpens a “Load File” dialog (using <code>RFD</code>) filtered by …\nOpens a folder selection dialog (using <code>RFD</code>) for loading a …\nOptional path to the project’s main Typst file.\nCreates a new <code>ProjectCache</code> from a root path and optional …\nRetrieves the base environment path for Tide inside the …\nAbsolute path to the root of the project.\nOpens a “Save File” dialog (using <code>RFD</code>) filtered by the …\nSaves the given in-memory <code>Buffer</code> to disk at the specified …\nSupported file extensions for full import (includes source …\nAllows importing all supported file types (Typst source …\nSupported file extensions when importing only Typst …\nRestricts import to only Typst source files.\nDefines the type of files that can be uploaded through the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents a binary file (e.g. image or font) to be used …\nRepresents a file that was imported, either as an asset or …\nRepresents a <code>.typ</code> Typst source file.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoads a single file from disk, detecting whether it is a …\nRecursively imports all compatible files from a given …\nLoads a <code>.typ</code> Typst source file and wraps it as an …\nRecursively gathers all file paths inside the provided …\nRaw binary contents of the asset.\nUnique file identifier, using a virtual path relative to …\nUnique file identifier, using a virtual path relative to …\nThe actual source code of the Typst file.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA UI component that displays Typst-related error messages …\nTriggered when the error display should be hidden (that …\nMessages handled by the debug zone component.\nTriggered when errors should be shown in a debug zone.\nReturns the string of formatted errors.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>DebugZone</code> instance with the given error …\nA string containing the formatted Typst errors.\nReturns the Iced view for this debug zone.\nChange the currently selected file to the one at the given …\nSet the given file as the main file for the project.\nDelete the file at the specified path.\nRepresents a directory node in the file system tree.\nToggle a directory’s open/closed state on click.\nRepresents a file node in the file system.\nHandle a file being right-clicked.\nTriggered when the mouse exits a file item.\nRepresents the interactive file tree UI component of Tide.\nRepresents messages triggered by user interactions with …\nAdds a file to the file tree.\nChanges the last clicked file (used for file actions).\nChanges the main Typst file path.\nChanges the currently selected file.\nPath to the file that was most recently clicked.\nCreates a clickable button representing a directory.\nThe subdirectories of the Dir.\nInternal representation of the file system.\nThe files stored within the Dir.\nToggles open/closed state of a directory node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe associated icon of the file.\nCreates a small icon button for actions like delete or set …\nInitializes and returns the list of subdirectories.\nInitializes and returns the list of files in this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe expansion state.\nPath to the file marked as the main Typst file.\nThe name of the Dir.\nThe file display name.\nCreates a new <code>FileTree</code> rooted at the given directory path.\nCreates a new <code>Dir</code> from the given path.\nCreates a new <code>File</code> from the given path.\nThe root path.\nThe file path.\nRefreshes file entries in the tree.\nReloads the files in this directory, refreshing the …\nPath to the currently selected file in the UI.\nUpdates the expansion state of the directory at the …\nBuilds and returns the file tree view as an <code>Element</code>.\nRecursively builds the view of this directory and its …\nBuilds and returns the view for the file node. Displays …\nTriggered when the modal is canceled.\nTriggered when the user requests to create a file.\nA modal dialog used to create a new file.\nTriggered when the file name input changes.\nTriggered when the user opens a file dialog to choose a …\nTriggered when the user requests to create a project.\nA modal dialog used to create a new project.\nTriggered when the project name input changes.\nTriggered when the project path input changes.\nAttempts to create a new project directory with a default …\nThe name of the file being created.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMakes the state of the modal invisible.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new ProjectModal with empty input fields.\nCreates a new <code>FileModal</code> instance with empty fields.\nThe name of the new project.\nThe path where the project should be created.\nAdds the path of a template file to be imported when …\nThe root path of the project in which the file modal is …\nMakes the state of the modal visible.\nA template file that can be included in the project when …\nHandles messages and updates internal state accordingly.\nHandles messages to update the internal state.\nReturns the Iced view for the modal.\nReturns the Iced view for the modal.\nThe modal visibility state.\nThe modal visibility state.\nWarning text to display for invalid inputs.\nWarning text to show in case of invalid input.\nA confirmation dialog tied to a file identified by its …\nTriggered when the user confirms deletion of a file.\nAn error message.\nTriggered to dismiss an active pop-up.\nMessages used in the context of pop-up dialog interactions.\nRepresents a pop-up dialog that can display a warning, …\nRepresents the different types of pop-up dialogs.\nTriggered when a pop-up should be shown.\nA warning message.\nReturns a <code>Row</code> widget containing “Cancel” and “Ok” …\nReturns the formatted details string.\nThe detailed description or context shown in the pop-up.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>PopUpElement</code> with the given type, title, and …\nThe type of pop-up (see <code>PopUpType</code>).\nReturns a string representation of the pop-up type (e.g., …\nThe main title of the pop-up.\nReturns the formatted title to be displayed, combining …\nReturns the Iced view representing the pop-up element.\nRepresents the current state of the document preview, …\nReturns the argument unchanged.\nA collection of rendering handles associated with the …\nCalls <code>U::from(self)</code>.\nIndicates whether the preview should be displayed in …\nCreates a new <code>Preview</code> instance with no handle and …\nBuilds and returns the view for the status bar at the …\nAdds a local template to the project.\nTriggers theme switching.\nOpens or toggles a drop-down menu.\nInitiates an export operation.\nIndicates the result of an imported file.\nIndicates the result of a file save operation.\nForces the preview to regenerate.\nOpens the Typst documentation online.\nMessages used in the context of toolbar interactions.\nCreates a new file.\nCreates a new project.\nOpens a file from the system.\nOpens a project from the system. Accepts optional path and …\nIndicates the result of an export operation.\nTriggers file saving. The boolean indicates whether it’s …\nInitiates creation from a predefined template.\nIndicates the result of starting from a template.\nA specific theme was selected.\nToggles the visibility or style of the preview.\nOpens the Typst Universe online.\nUploads a file of a given type, optionally providing a …\nReturns the editing toolbar element for the application.\nReturns the argument unchanged.\nCreates an icon-based button with a tooltip, styled for …\nCalls <code>U::from(self)</code>.\nCreates a styled button used inside drop-down menus.\nAttempts to open a given URL or file <code>path</code> in the system’…\nCreates a text-based button styled for use in toolbars or …\nReturns the toolbar displayed on the welcome screen …\nA text action performed inside the editor (e.g., typing or …\nApplies the selected autocompletion suggestion at the …\nTriggers the autocompletion logic based on current cursor …\nStores the current autocompletion state, including …\nIndicates a cached project was loaded or changed.\nCreates a new file in the current project.\nTracks the currently selected buffer and file.\nA message emitted by the debug zone (e.g., toggling view …\nA wrapper around <code>Completion</code> that implements display and …\nRepresents the current editing state of Tide.\nA message emitted by the “new file” modal.\nA message emitted from the file tree component (e.g., file …\nMessages handled by the <em>Editing</em> view.\nA message emitted by the currently displayed pop-up window.\nLoaded preview images (SVG handles) to be rendered on …\nA message emitted by the “new project” modal.\nResizes the preview area to the given width.\nResizes the file tree area to the given width.\nDisplays the autocompletion menu with the given …\nResult of an SVG export operation for the current document.\nA message emitted by the toolbar (e.g., button click or …\nReturns <code>true</code> if all open buffers have been saved.\nApplies the completion to the current context, trimming …\nMap of auto-paired characters for editor key bindings …\nAutocompletion state including the available suggestions …\nCurrent buffer.\nAll loaded file buffers indexed by their unique <code>FileId</code>.\nCloses the buffer associated with the given <code>FileId</code>.\nList of displayable completions.\nAttempts to create a new empty file at the specified path …\nThe currently selected <code>Buffer</code> and file.\nReturns a reference to the current <code>Buffer</code> in use.\nRoot, absolute, path of the project (the project …\nReturns the currently active <code>FileId</code> if available.\nCurrent cursor position in the editor.\nDebug UI zone (e.g. diagnostics, logs).\nDeletes a file both from disk and from the Typst world. …\nReturns an empty <code>Current</code> state with no buffer loaded.\nAssociated <code>FileId</code>, if it exists.\nModal window for creating a file.\nInteractive tree view of files in the current project.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>DisplayableCompletion</code> from a <code>Completion</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the <code>TideWorld</code> with a temporary, fake, main …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Editing</code> instance with the given …\nCreates a new <code>Current</code> from the given buffer and file ID.\nCreates a new empty <code>AutocompletionContext</code>.\nPop-up element currently displayed over the UI.\nCurrent completion position in the editor.\nCurrent state of the document preview.\nModal window for creating a new project.\nSets the current buffer and file ID to the provided values.\nScreen split positions between the file tree, editor, and …\nRepresents the current Typst environment (source files, …\nUpdates the editing state in response to a <code>Message</code> input.\nUpdates the Typst source and in-memory buffer for the …\nUploads a file from disk into the Typst environment and …\nReturns the main <code>Element&lt;Message&gt;</code> view for the editing …\nMessages handled by the <em>Welcome</em> view.\nForwarded message from the project creation modal.\nForwarded message from the toolbar.\nRepresents the main <em>Welcome page</em> shown on Tide startup.\nCreates a clickable button representing a recent file or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Welcome</code> view with cached recent projects.\nThe modal used for creating a new project.\nList of recently opened projects.\nUpdates the welcome view based on incoming <code>Message</code>s.\nRenders the full welcome screen, including shortcuts, …\nCreates a (big) button for the welcome screen with …\nPosition is an absolute distance from the left edge.\nPosition is a relative ratio (0.0 to 1.0) of the container …\nPosition is an absolute distance from the right edge.\nLayout strategies for the <code>VSplit</code> widget.\nA custom vertical split widget that divides the screen …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>VSplit</code> with two child widgets (left and …\nRegisters a callback message when the split position is …\nSets the thickness of the split rule, in pixels.\nSets the position of the split:\nDefines the layout strategy (see <code>Strategy</code>).\nAllows customizing the rule’s style using a closure with …\nInternal file storage used by <code>TideWorld</code>.\nThe typesetting environment for the Tide IDE, implementing …\nInserts an asset file (e.g. image, binary) into the world.\nAdds an imported file to the world (either source or …\nInserts a new Typst source file into the world.\nMap of binary asset files, keyed by <code>FileId</code>.\nReturns a reference to the font book used for typesetting. …\nFont metadata registry generated from loaded fonts.\nUpdates the <code>main</code> file ID to a new one.\nRetrieves the default “Libertinus” font and returns it …\nRetrieves a binary asset file by ID, if available.\nFile storage for both assets and Typst sources.\nProvides a formatted debug representation of the world, …\nRetrieves a font by index.\nLoaded font instances used for rendering.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>FileId</code> from a file system path and project root.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitializes the standard Typst library with default styles.\nReturns a reference to the standard Typst library. See …\nLazily-initialized standard Typst library.\nLoads all font files from the given directory and parses …\nReturns the file ID of the main document. See <code>World::main</code>.\nIdentifier of the main source file currently being typeset.\nConstructs a new <code>TideWorld</code> instance with an optional asset …\nReplaces the source content for an existing file in the …\nRemoves both source and asset entries for a given file ID.\nRetrieves a source file by ID, if available.\nMap of Typst source files, keyed by <code>FileId</code>.\nReturns the current date/time. See <code>World::today</code>.\nUpcasting. Returns a reference to this world as a trait …")